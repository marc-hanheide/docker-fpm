name: Build changed yaml files

run-name: Autobuild Debs for all changed yaml configs, triggered by event ${{ github.event.action }} by @${{ github.actor }}.

on:
  pull_request:
    branches:
      - main
    paths:
      - '*.yaml'
  push:
    branches:
      - main
    paths:
      - '*.yaml'

jobs:

  build:
    runs-on: lcas

    steps:
    - uses: AutoModality/action-clean@v1
    - uses: actions/checkout@v3
    - uses: jitterbit/get-changed-files@v1
      id: changed_files
    - name: "build all changed yaml files"
      run: |
        echo "Added or modified files: ${{ steps.changed_files.outputs.added_modified }}"
        echo "Removed files: ${{ steps.changed_files.outputs.removed }}"
        echo '## Processing changed `.yaml` files' >> $GITHUB_STEP_SUMMARY
        for file in ${{ steps.changed_files.outputs.added_modified }}; do
          if [ ${file: -5} != ".yaml" ]; then
            echo "Skipping $file as not a .yaml file."
            continue
          fi

          if [ `dirname $file` != "." ]; then
            echo "Skipping $file as not in ./ dir."
            continue
          fi
          echo "* Building $file" >> $GITHUB_STEP_SUMMARY
          cd ${GITHUB_WORKSPACE}
          ${GITHUB_WORKSPACE}/make-deb.sh -c "file://$file"
        done

    - name: "list all outputs"
      if: '!cancelled()'
      run: |
        echo '## All Outputs' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        ls -lR ${{ github.workspace }}/output >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

        echo '## All Changes' >> $GITHUB_STEP_SUMMARY
        if [ -f ${{ github.workspace }}/output/changes.txt ]; then
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat ${{ github.workspace }}/output/changes.txt  >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "No changes computed in this run." >> $GITHUB_STEP_SUMMARY
        fi

    - uses: actions/upload-artifact@v4
      with:
        name: generated logs and Deb packages
        path: |
          ./output/*.deb
          ./output/*.txt
          ./output/*.yaml
          ./output/*.sh
          ./output/*.bash
          ./output/*.tgz
          ./output/*.log
        retention-days: 3
    - name: "upload to Aptly repo and make available at staging"
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo "## Upload to Aptly" >> $GITHUB_STEP_SUMMARY
        APTLY_API="https://lcas.lincoln.ac.uk/apt/api"
        folder=`mktemp -u tmp.XXXXXXXXXXXXXXX`
        repo=lcas_ros
        files=`find ${{ github.workspace }}/output -name "*.deb"`
        echo "::group::upload to Aptly"
        for f in $files; do
          echo "* Uploading $f to Aptly" >> $GITHUB_STEP_SUMMARY
          curl -fsS -X POST -F "file=@$f" -u lcas:${{ secrets.APTLY_TOKEN }} $APTLY_API/files/$folder
        done
        echo "updating repo with files in $folder" >> $GITHUB_STEP_SUMMARY
        curl -fsS -X POST -u lcas:${{ secrets.APTLY_TOKEN }} $APTLY_API/repos/$repo/file/$folder
        echo "Updating published staging repo..." >> $GITHUB_STEP_SUMMARY
        curl  -X PUT -H 'Content-Type: application/json' --data "{\"ForceOverwrite\": true, \"SourceKind\": \"local\", \"Sources\": [{\"Name\": \"$repo\"}]}" -u lcas:${{ secrets.APTLY_TOKEN }} "$APTLY_API/publish/staging/jammy"
        echo "::endgroup::"
    # - name: "copy from staging to lcas"
    #   if: ${{ github.event_name != 'pull_request' }}
    #   run: |
    #     APTLY_API="https://lcas.lincoln.ac.uk/apt/api"
    #     repo=lcas_ros
    #     echo "::group::copy from staging to lcas"
    #     curl  -X PUT -H 'Content-Type: application/json' --data "{\"ForceOverwrite\": true, \"SourceKind\": \"local\", \"Sources\": [{\"Name\": \"$repo\"}]}" -u lcas:${{ secrets.APTLY_TOKEN }} $APTLY_API/publish/lcas/jammy
    - name: "list packages"
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo "## List all packages in "staging" on aptly" >> $GITHUB_STEP_SUMMARY
        echo "::group::Packages in lcas/amd64"
        curl -s https://lcas.lincoln.ac.uk/apt/staging/dists/jammy/lcas/binary-amd64/Packages | grep  "^Package: \|^Version: " | sed 's/^Package: //' | sed 's/^Version: /  -> /' >> $GITHUB_STEP_SUMMARY
        echo "::endgroup::"
        echo "**go to https://github.com/LCAS/docker-dpkg-build/actions/workflows/publish-aptly-release.yaml to make a new distribution release.**" >> $GITHUB_STEP_SUMMARY
           
